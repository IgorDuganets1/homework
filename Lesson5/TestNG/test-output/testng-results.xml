<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="11" passed="11">
  <reporter-output>
  </reporter-output>
  <suite name="TestSuite" duration-ms="199" started-at="2015-11-06T18:54:58Z" finished-at="2015-11-06T18:54:59Z">
    <groups>
      <group name="takeEmployee">
        <method signature="Testmethods.testTakeNameEmployee()[pri:0, instance:employee.Testmethods@1888ff2c]" name="testTakeNameEmployee" class="employee.Testmethods"/>
        <method signature="Testmethods2.testTakeAdressEmployee()[pri:0, instance:employee.Testmethods2@649d209a]" name="testTakeAdressEmployee" class="employee.Testmethods2"/>
        <method signature="Testmethods2.testTakeDateOfBirthEmloyee()[pri:0, instance:employee.Testmethods2@649d209a]" name="testTakeDateOfBirthEmloyee" class="employee.Testmethods2"/>
      </group> <!-- takeEmployee -->
      <group name="Calculate">
        <method signature="Testmethods.testCalculateExperienceRatio()[pri:0, instance:employee.Testmethods@1888ff2c]" name="testCalculateExperienceRatio" class="employee.Testmethods"/>
        <method signature="Testmethods2.testCalculateExperienceRatioException()[pri:0, instance:employee.Testmethods2@649d209a]" name="testCalculateExperienceRatioException" class="employee.Testmethods2"/>
        <method signature="Testmethods2.testCalculateSalary()[pri:0, instance:employee.Testmethods2@649d209a]" name="testCalculateSalary" class="employee.Testmethods2"/>
      </group> <!-- Calculate -->
      <group name="getEmployee">
        <method signature="Testmethods.testGetDateOfBirthEmployee()[pri:0, instance:employee.Testmethods@1888ff2c]" name="testGetDateOfBirthEmployee" class="employee.Testmethods"/>
        <method signature="Testmethods2.testGetAdressEmployee()[pri:0, instance:employee.Testmethods2@649d209a]" name="testGetAdressEmployee" class="employee.Testmethods2"/>
        <method signature="Testmethods2.testGetNameEmployee()[pri:0, instance:employee.Testmethods2@649d209a]" name="testGetNameEmployee" class="employee.Testmethods2"/>
      </group> <!-- getEmployee -->
    </groups>
    <test name="AutoQA" duration-ms="199" started-at="2015-11-06T18:54:58Z" finished-at="2015-11-06T18:54:59Z">
      <class name="employee.Testmethods">
        <test-method status="PASS" signature="runM()[pri:0, instance:employee.Testmethods@1888ff2c]" name="runM" is-config="true" duration-ms="24" started-at="2015-11-06T20:54:58Z" finished-at="2015-11-06T20:54:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runM -->
        <test-method status="PASS" signature="testCalculateExperienceRatio()[pri:0, instance:employee.Testmethods@1888ff2c]" name="testCalculateExperienceRatio" duration-ms="72" started-at="2015-11-06T20:54:58Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateExperienceRatio -->
        <test-method status="PASS" signature="testGetDateOfBirthEmployee()[pri:0, instance:employee.Testmethods@1888ff2c]" name="testGetDateOfBirthEmployee" duration-ms="3" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDateOfBirthEmployee -->
        <test-method status="PASS" signature="testTakeNameEmployee()[pri:0, instance:employee.Testmethods@1888ff2c]" name="testTakeNameEmployee" duration-ms="2" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTakeNameEmployee -->
        <test-method status="PASS" signature="testCalculateTaxEmloyee()[pri:0, instance:employee.Testmethods@1888ff2c]" name="testCalculateTaxEmloyee" duration-ms="2" started-at="2015-11-06T20:54:59Z" depends-on-methods="employee.Testmethods.testCalculateExperienceRatio" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateTaxEmloyee -->
        <test-method status="PASS" signature="testIsBirthdayBonus()[pri:0, instance:employee.Testmethods@1888ff2c]" name="testIsBirthdayBonus" duration-ms="1" depends-on-groups="Calculate" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsBirthdayBonus -->
        <test-method status="PASS" signature="closeM()[pri:0, instance:employee.Testmethods@1888ff2c]" name="closeM" is-config="true" duration-ms="0" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeM -->
      </class> <!-- employee.Testmethods -->
      <class name="employee.Testmethods2">
        <test-method status="PASS" signature="runM()[pri:0, instance:employee.Testmethods2@649d209a]" name="runM" is-config="true" duration-ms="1" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runM -->
        <test-method status="PASS" signature="testCalculateExperienceRatioException()[pri:0, instance:employee.Testmethods2@649d209a]" name="testCalculateExperienceRatioException" duration-ms="10" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <exception class="java.lang.ArithmeticException">
            <full-stacktrace>
              <![CDATA[java.lang.ArithmeticException
	at employee.methods.calculateExperienceRatio(methods.java:41)
	at employee.Testmethods2.testCalculateExperienceRatioException(Testmethods2.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:54)
	at org.testng.internal.InvokeMethodRunnable.run(InvokeMethodRunnable.java:44)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArithmeticException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateExperienceRatioException -->
        <test-method status="PASS" signature="testCalculateSalary()[pri:0, instance:employee.Testmethods2@649d209a]" name="testCalculateSalary" duration-ms="2" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCalculateSalary -->
        <test-method status="PASS" signature="testGetAdressEmployee()[pri:0, instance:employee.Testmethods2@649d209a]" name="testGetAdressEmployee" duration-ms="6" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAdressEmployee -->
        <test-method status="PASS" signature="testGetNameEmployee()[pri:0, instance:employee.Testmethods2@649d209a]" name="testGetNameEmployee" duration-ms="2" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetNameEmployee -->
        <test-method status="PASS" signature="testTakeAdressEmployee()[pri:0, instance:employee.Testmethods2@649d209a]" name="testTakeAdressEmployee" duration-ms="2" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTakeAdressEmployee -->
        <test-method status="PASS" signature="testTakeDateOfBirthEmloyee()[pri:0, instance:employee.Testmethods2@649d209a]" name="testTakeDateOfBirthEmloyee" duration-ms="2" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTakeDateOfBirthEmloyee -->
        <test-method status="PASS" signature="closeM()[pri:0, instance:employee.Testmethods2@649d209a]" name="closeM" is-config="true" duration-ms="0" started-at="2015-11-06T20:54:59Z" finished-at="2015-11-06T20:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeM -->
      </class> <!-- employee.Testmethods2 -->
    </test> <!-- AutoQA -->
  </suite> <!-- TestSuite -->
</testng-results>
